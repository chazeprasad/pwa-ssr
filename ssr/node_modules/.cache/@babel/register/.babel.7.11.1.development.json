{
  "{\"sourceRoot\":\"/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr\",\"filename\":\"/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/gulpfile.ts\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.1": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr",
      "filename": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/gulpfile.ts",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/gulpfile.ts",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/gulpfile.ts",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/",
        "sourceFileName": "gulpfile.ts"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nrequire(\"@babel/polyfill\");\n\nvar gulp = _interopRequireWildcard(require(\"gulp\"));\n\nvar _gulpChanged = _interopRequireDefault(require(\"gulp-changed\"));\n\nvar _gulpNodemon = _interopRequireDefault(require(\"gulp-nodemon\"));\n\nvar ts = _interopRequireWildcard(require(\"gulp-typescript\"));\n\nvar _del = _interopRequireDefault(require(\"del\"));\n\nvar _gulp4RunSequence = _interopRequireDefault(require(\"gulp4-run-sequence\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar src = './src';\nvar dest = './dist';\nvar copy = gulp.task('copy', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return gulp.src([src + '/view/**/*.hbs']).pipe(gulp.dest(dest + '/view'));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nvar serve = gulp.task('serve', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(next) {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return (0, _gulpNodemon[\"default\"])({\n              script: './index.js',\n              ext: 'js json env hbs',\n              ignore: ['./src/*', './dist/*', './test/*', './docs/*', './gulp/*', './.git', './node_modules/*'],\n              watch: ['./src/*'],\n              done: next\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar transpile = gulp.task('transpile', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(next) {\n    var tsProject, tsResult;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            tsProject = ts.createProject('tsconfig.json');\n            tsResult = tsProject.src().pipe(tsProject());\n            _context3.next = 4;\n            return tsResult.js.pipe(gulp.dest(dest));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nvar clean = gulp.task('clean', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n  return regeneratorRuntime.wrap(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return (0, _del[\"default\"])([dest]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _callee4);\n})));\nvar dev = gulp.task('dev', function (next) {\n  (0, _gulp4RunSequence[\"default\"])('clean', 'copy', 'transpile', 'serve', next);\n});\nvar build = gulp.task('build', function (next) {\n  (0, _gulp4RunSequence[\"default\"])('clean', 'copy', 'transpile', next);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLnRzIl0sIm5hbWVzIjpbInNyYyIsImRlc3QiLCJjb3B5IiwiZ3VscCIsInRhc2siLCJwaXBlIiwic2VydmUiLCJuZXh0Iiwic2NyaXB0IiwiZXh0IiwiaWdub3JlIiwid2F0Y2giLCJkb25lIiwidHJhbnNwaWxlIiwidHNQcm9qZWN0IiwidHMiLCJjcmVhdGVQcm9qZWN0IiwidHNSZXN1bHQiLCJqcyIsImNsZWFuIiwiZGV2IiwiYnVpbGQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsR0FBRyxHQUFHLE9BQVo7QUFDQSxJQUFNQyxJQUFJLEdBQUcsUUFBYjtBQUVBLElBQU1DLElBQUksR0FBR0MsSUFBSSxDQUFDQyxJQUFMLENBQVUsTUFBVix1RUFBa0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBQ3JCRCxJQUFJLENBQUNILEdBQUwsQ0FBUyxDQUFFQSxHQUFHLEdBQUcsZ0JBQVIsQ0FBVCxFQUNESyxJQURDLENBQ0lGLElBQUksQ0FBQ0YsSUFBTCxDQUFVQSxJQUFJLEdBQUcsT0FBakIsQ0FESixDQURxQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFsQixHQUFiO0FBS0EsSUFBTUssS0FBSyxHQUFHSCxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWO0FBQUEsc0VBQW1CLGtCQUFPRyxJQUFQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUN2Qiw2QkFBUTtBQUNWQyxjQUFBQSxNQUFNLEVBQUUsWUFERTtBQUVWQyxjQUFBQSxHQUFHLEVBQUUsaUJBRks7QUFHVkMsY0FBQUEsTUFBTSxFQUFFLENBQ0osU0FESSxFQUVKLFVBRkksRUFHSixVQUhJLEVBSUosVUFKSSxFQUtKLFVBTEksRUFNSixRQU5JLEVBT0osa0JBUEksQ0FIRTtBQWFWQyxjQUFBQSxLQUFLLEVBQUUsQ0FBQyxTQUFELENBYkc7QUFjVkMsY0FBQUEsSUFBSSxFQUFFTDtBQWRJLGFBQVIsQ0FEdUI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBbkI7O0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBZDtBQW9CQSxJQUFNTSxTQUFTLEdBQUdWLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFdBQVY7QUFBQSxzRUFBdUIsa0JBQU9HLElBQVA7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQy9CTyxZQUFBQSxTQUQrQixHQUNuQkMsRUFBRSxDQUFDQyxhQUFILENBQWlCLGVBQWpCLENBRG1CO0FBRy9CQyxZQUFBQSxRQUgrQixHQUdwQkgsU0FBUyxDQUFDZCxHQUFWLEdBQ1pLLElBRFksQ0FDUFMsU0FBUyxFQURGLENBSG9CO0FBQUE7QUFBQSxtQkFNL0JHLFFBQVEsQ0FBQ0MsRUFBVCxDQUFZYixJQUFaLENBQWlCRixJQUFJLENBQUNGLElBQUwsQ0FBVUEsSUFBVixDQUFqQixDQU4rQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUF2Qjs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFsQjtBQVNBLElBQU1rQixLQUFLLEdBQUdoQixJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWLHVFQUFtQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkFDdkIscUJBQUksQ0FBQ0gsSUFBRCxDQUFKLENBRHVCOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQW5CLEdBQWQ7QUFJQSxJQUFNbUIsR0FBRyxHQUFHakIsSUFBSSxDQUFDQyxJQUFMLENBQVUsS0FBVixFQUFrQixVQUFDRyxJQUFELEVBQVU7QUFDcEMsb0NBQVksT0FBWixFQUFxQixNQUFyQixFQUE2QixXQUE3QixFQUEwQyxPQUExQyxFQUFtREEsSUFBbkQ7QUFDSCxDQUZXLENBQVo7QUFJQSxJQUFNYyxLQUFLLEdBQUdsQixJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWLEVBQW9CLFVBQUNHLElBQUQsRUFBVTtBQUN4QyxvQ0FBWSxPQUFaLEVBQXFCLE1BQXJCLEVBQTZCLFdBQTdCLEVBQTBDQSxJQUExQztBQUNILENBRmEsQ0FBZCIsInNvdXJjZVJvb3QiOiIvVm9sdW1lcy9Xb3Jrc3BhY2UvRGVNZU5ldy9hcHAvcHdhLXNzci1zZXJ2aWNlL3Nzci8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0BiYWJlbC9wb2x5ZmlsbCc7XG5pbXBvcnQgKiBhcyBndWxwIGZyb20gJ2d1bHAnO1xuaW1wb3J0IGNoYW5nZWQgZnJvbSAnZ3VscC1jaGFuZ2VkJztcbmltcG9ydCBub2RlbW9uIGZyb20gJ2d1bHAtbm9kZW1vbic7XG5pbXBvcnQgKiBhcyB0cyBmcm9tICdndWxwLXR5cGVzY3JpcHQnO1xuaW1wb3J0IGRlbCBmcm9tICdkZWwnO1xuaW1wb3J0IHJ1blNlcXVlbmNlIGZyb20gJ2d1bHA0LXJ1bi1zZXF1ZW5jZSc7XG5cbmNvbnN0IHNyYyA9ICcuL3NyYyc7XG5jb25zdCBkZXN0ID0gJy4vZGlzdCc7XG5cbmNvbnN0IGNvcHkgPSBndWxwLnRhc2soJ2NvcHknLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZ3VscC5zcmMoWyBzcmMgKyAnL3ZpZXcvKiovKi5oYnMnIF0pXG4gICAgICAgIC5waXBlKGd1bHAuZGVzdChkZXN0ICsgJy92aWV3JykpO1xufSk7XG5cbmNvbnN0IHNlcnZlID0gZ3VscC50YXNrKCdzZXJ2ZScsIGFzeW5jIChuZXh0KSA9PiB7XG4gICAgYXdhaXQgbm9kZW1vbih7XG4gICAgICAgIHNjcmlwdDogJy4vaW5kZXguanMnLFxuICAgICAgICBleHQ6ICdqcyBqc29uIGVudiBoYnMnLFxuICAgICAgICBpZ25vcmU6IFtcbiAgICAgICAgICAgICcuL3NyYy8qJyxcbiAgICAgICAgICAgICcuL2Rpc3QvKicsXG4gICAgICAgICAgICAnLi90ZXN0LyonLFxuICAgICAgICAgICAgJy4vZG9jcy8qJyxcbiAgICAgICAgICAgICcuL2d1bHAvKicsXG4gICAgICAgICAgICAnLi8uZ2l0JyxcbiAgICAgICAgICAgICcuL25vZGVfbW9kdWxlcy8qJ1xuICAgICAgICBdLFxuXG4gICAgICAgIHdhdGNoOiBbJy4vc3JjLyonXSxcbiAgICAgICAgZG9uZTogbmV4dFxuICAgIH0pO1xufSk7XG5cblxuY29uc3QgdHJhbnNwaWxlID0gZ3VscC50YXNrKCd0cmFuc3BpbGUnLCBhc3luYyAobmV4dCkgPT4ge1xuICAgIGNvbnN0IHRzUHJvamVjdCA9IHRzLmNyZWF0ZVByb2plY3QoJ3RzY29uZmlnLmpzb24nKTtcblxuICAgIGNvbnN0IHRzUmVzdWx0ID0gdHNQcm9qZWN0LnNyYygpXG4gICAgICAgIC5waXBlKHRzUHJvamVjdCgpKTtcblxuICAgIGF3YWl0IHRzUmVzdWx0LmpzLnBpcGUoZ3VscC5kZXN0KGRlc3QpKTsgXG59KTtcblxuY29uc3QgY2xlYW4gPSBndWxwLnRhc2soJ2NsZWFuJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRlbChbZGVzdF0gKTtcbn0pXG5cbmNvbnN0IGRldiA9IGd1bHAudGFzaygnZGV2JywgIChuZXh0KSA9PiB7XG4gICAgcnVuU2VxdWVuY2UoJ2NsZWFuJywgJ2NvcHknLCAndHJhbnNwaWxlJywgJ3NlcnZlJywgbmV4dCk7XG59KVxuXG5jb25zdCBidWlsZCA9IGd1bHAudGFzaygnYnVpbGQnLCAgKG5leHQpID0+IHtcbiAgICBydW5TZXF1ZW5jZSgnY2xlYW4nLCAnY29weScsICd0cmFuc3BpbGUnLCBuZXh0KTtcbn0pXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.ts"
      ],
      "names": [
        "src",
        "dest",
        "copy",
        "gulp",
        "task",
        "pipe",
        "serve",
        "next",
        "script",
        "ext",
        "ignore",
        "watch",
        "done",
        "transpile",
        "tsProject",
        "ts",
        "createProject",
        "tsResult",
        "js",
        "clean",
        "dev",
        "build"
      ],
      "mappings": ";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAG,OAAZ;AACA,IAAMC,IAAI,GAAG,QAAb;AAEA,IAAMC,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAU,MAAV,uEAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACrBD,IAAI,CAACH,GAAL,CAAS,CAAEA,GAAG,GAAG,gBAAR,CAAT,EACDK,IADC,CACIF,IAAI,CAACF,IAAL,CAAUA,IAAI,GAAG,OAAjB,CADJ,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB,GAAb;AAKA,IAAMK,KAAK,GAAGH,IAAI,CAACC,IAAL,CAAU,OAAV;AAAA,sEAAmB,kBAAOG,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACvB,6BAAQ;AACVC,cAAAA,MAAM,EAAE,YADE;AAEVC,cAAAA,GAAG,EAAE,iBAFK;AAGVC,cAAAA,MAAM,EAAE,CACJ,SADI,EAEJ,UAFI,EAGJ,UAHI,EAIJ,UAJI,EAKJ,UALI,EAMJ,QANI,EAOJ,kBAPI,CAHE;AAaVC,cAAAA,KAAK,EAAE,CAAC,SAAD,CAbG;AAcVC,cAAAA,IAAI,EAAEL;AAdI,aAAR,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,IAAd;AAoBA,IAAMM,SAAS,GAAGV,IAAI,CAACC,IAAL,CAAU,WAAV;AAAA,sEAAuB,kBAAOG,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BO,YAAAA,SAD+B,GACnBC,EAAE,CAACC,aAAH,CAAiB,eAAjB,CADmB;AAG/BC,YAAAA,QAH+B,GAGpBH,SAAS,CAACd,GAAV,GACZK,IADY,CACPS,SAAS,EADF,CAHoB;AAAA;AAAA,mBAM/BG,QAAQ,CAACC,EAAT,CAAYb,IAAZ,CAAiBF,IAAI,CAACF,IAAL,CAAUA,IAAV,CAAjB,CAN+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA,IAAlB;AASA,IAAMkB,KAAK,GAAGhB,IAAI,CAACC,IAAL,CAAU,OAAV,uEAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACvB,qBAAI,CAACH,IAAD,CAAJ,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,GAAd;AAIA,IAAMmB,GAAG,GAAGjB,IAAI,CAACC,IAAL,CAAU,KAAV,EAAkB,UAACG,IAAD,EAAU;AACpC,oCAAY,OAAZ,EAAqB,MAArB,EAA6B,WAA7B,EAA0C,OAA1C,EAAmDA,IAAnD;AACH,CAFW,CAAZ;AAIA,IAAMc,KAAK,GAAGlB,IAAI,CAACC,IAAL,CAAU,OAAV,EAAoB,UAACG,IAAD,EAAU;AACxC,oCAAY,OAAZ,EAAqB,MAArB,EAA6B,WAA7B,EAA0CA,IAA1C;AACH,CAFa,CAAd",
      "sourceRoot": "/Volumes/Workspace/DeMeNew/app/pwa-ssr-service/ssr/",
      "sourcesContent": [
        "import '@babel/polyfill';\nimport * as gulp from 'gulp';\nimport changed from 'gulp-changed';\nimport nodemon from 'gulp-nodemon';\nimport * as ts from 'gulp-typescript';\nimport del from 'del';\nimport runSequence from 'gulp4-run-sequence';\n\nconst src = './src';\nconst dest = './dist';\n\nconst copy = gulp.task('copy', async () => {\n    await gulp.src([ src + '/view/**/*.hbs' ])\n        .pipe(gulp.dest(dest + '/view'));\n});\n\nconst serve = gulp.task('serve', async (next) => {\n    await nodemon({\n        script: './index.js',\n        ext: 'js json env hbs',\n        ignore: [\n            './src/*',\n            './dist/*',\n            './test/*',\n            './docs/*',\n            './gulp/*',\n            './.git',\n            './node_modules/*'\n        ],\n\n        watch: ['./src/*'],\n        done: next\n    });\n});\n\n\nconst transpile = gulp.task('transpile', async (next) => {\n    const tsProject = ts.createProject('tsconfig.json');\n\n    const tsResult = tsProject.src()\n        .pipe(tsProject());\n\n    await tsResult.js.pipe(gulp.dest(dest)); \n});\n\nconst clean = gulp.task('clean', async () => {\n    await del([dest] );\n})\n\nconst dev = gulp.task('dev',  (next) => {\n    runSequence('clean', 'copy', 'transpile', 'serve', next);\n})\n\nconst build = gulp.task('build',  (next) => {\n    runSequence('clean', 'copy', 'transpile', next);\n})\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1597031495030
  }
}